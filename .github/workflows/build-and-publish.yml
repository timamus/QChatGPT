name: Main

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.x'

      - name: Install dependencies
        run: npm install

      - name: Install Quasar CLI
        run: npm install -g @quasar/cli

      - name: Build Quasar Electron App for Linux
        run: quasar build -m electron

      - name: Create ZIP Archive for Linux
        run: |
          cd dist/electron/Packaged
          zip -r QChatGPT-linux-x64.zip QChatGPT-linux-x64

      - name: Upload Linux Build Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: qchatgpt-linux
          path: dist/electron/Packaged/QChatGPT-linux-x64.zip

      - name: Create Version Info
        run: echo ${{ github.sha }} > Version.txt

      - name: Test
        run: cat Version.txt

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.x'

      - name: Install dependencies
        run: npm install

      - name: Install Quasar CLI
        run: npm install -g @quasar/cli

      - name: Build Quasar Electron App for Windows
        run: quasar build -m electron

      - name: Create ZIP Archive for Windows
        run: |
          cd dist/electron/Packaged
          Get-ChildItem -Force # Check directory structure
          Compress-Archive -Path QChatGPT-win32-x64 -DestinationPath QChatGPT-win32-x64.zip

      - name: Upload Windows Build Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: qchatgpt-windows
          path: dist/electron/Packaged/QChatGPT-win32-x64.zip

      - name: Create Version Info
        run: echo ${{ github.sha }} > Version.txt

      - name: Test
        run: cat Version.txt

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.x'

      - name: Install dependencies
        run: npm install

      - name: Install Quasar CLI
        run: npm install -g @quasar/cli

      - name: Build Quasar Electron App for MacOS
        run: quasar build -m electron

      - name: Create ZIP Archive for MacOS
        run: |
          cd dist/electron/Packaged
          ls -la # Check directory structure
          zip -r QChatGPT-darwin-arm64.zip QChatGPT-darwin-arm64

      - name: Upload MacOS Build Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: qchatgpt-macos
          path: dist/electron/Packaged/QChatGPT-darwin-arm64.zip

      - name: Create Version Info
        run: echo ${{ github.sha }} > Version.txt

      - name: Test
        run: cat Version.txt

  build-capacitor:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        shell: bash

    strategy:
      matrix:
         node-version: [20.x]

    steps:
      - uses: actions/checkout@v2
      - name: Setup NodeJS Environment ${{ matrix.node-version }}
        uses: actions/setup-node@v4.0.3
        with:
            node-version: ${{ matrix.node-version }}
      - run: yarn install && yarn global add @quasar/cli

      - name: Install Capacitor Android
        run: npm install @capacitor/android
      
      - run: quasar build -m capacitor -T android --skip-pkg
      - run: chmod +x ./src-capacitor/android/gradlew
      
      - name: Gradle Android
        uses: vgaidarji/android-github-actions-build@v1.0.1
        with:
          args: ./src-capacitor/android/gradlew --project-dir=./src-capacitor/android assembleDebug
      - run: zip -r ../android-debug.zip ./src-capacitor/android/app/build/outputs/apk/debug/

  publish:
    name: Publish Version
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Linux Build Artifacts
        uses: actions/download-artifact@v2
        with:
          name: qchatgpt-linux

      - name: Download Windows Build Artifacts
        uses: actions/download-artifact@v2
        with:
          name: qchatgpt-windows

      - name: Download MacOS Build Artifacts
        uses: actions/download-artifact@v2
        with:
          name: qchatgpt-macos

      - name: Get version from package.json
        id: get_version
        run: echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      - name: Create Version
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          ls -la # Check directory structure
          gh release create "v${{ env.VERSION }}" QChatGPT-linux-x64.zip QChatGPT-win32-x64.zip QChatGPT-darwin-arm64.zip -t "Version ${{ env.VERSION }}" -n "Version notes for ${{ env.VERSION }}" --target main
